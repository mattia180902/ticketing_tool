
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { getAllUsers } from '../fn/user/get-all-users';
import { GetAllUsers$Params } from '../fn/user/get-all-users';
import { getHelpers } from '../fn/user/get-helpers';
import { GetHelpers$Params } from '../fn/user/get-helpers';
import { getHelpersAndAdmins } from '../fn/user/get-helpers-and-admins';
import { GetHelpersAndAdmins$Params } from '../fn/user/get-helpers-and-admins';
import { getHelpersJunior } from '../fn/user/get-helpers-junior';
import { GetHelpersJunior$Params } from '../fn/user/get-helpers-junior';
import { getMe } from '../fn/user/get-me';
import { GetMe$Params } from '../fn/user/get-me';
import { updateContactInfo } from '../fn/user/update-contact-info';
import { UpdateContactInfo$Params } from '../fn/user/update-contact-info';
import { UserDto } from '../models/user-dto';

@Injectable({ providedIn: 'root' })
export class UserService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateContactInfo()` */
  static readonly UpdateContactInfoPath = '/api/v1/users/contact-info';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateContactInfo()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContactInfo$Response(params: UpdateContactInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updateContactInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateContactInfo$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContactInfo(params: UpdateContactInfo$Params, context?: HttpContext): Observable<UserDto> {
    return this.updateContactInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/api/v1/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getMe()` */
  static readonly GetMePath = '/api/v1/users/me';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMe()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMe$Response(params?: GetMe$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return getMe(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMe$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMe(params?: GetMe$Params, context?: HttpContext): Observable<UserDto> {
    return this.getMe$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getHelpers()` */
  static readonly GetHelpersPath = '/api/v1/users/helpers';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHelpers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpers$Response(params?: GetHelpers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getHelpers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHelpers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpers(params?: GetHelpers$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getHelpers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getHelpersJunior()` */
  static readonly GetHelpersJuniorPath = '/api/v1/users/helpers-junior';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHelpersJunior()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpersJunior$Response(params?: GetHelpersJunior$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getHelpersJunior(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHelpersJunior$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpersJunior(params?: GetHelpersJunior$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getHelpersJunior$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getHelpersAndAdmins()` */
  static readonly GetHelpersAndAdminsPath = '/api/v1/users/helpers-and-admins';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHelpersAndAdmins()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpersAndAdmins$Response(params?: GetHelpersAndAdmins$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getHelpersAndAdmins(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHelpersAndAdmins$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpersAndAdmins(params?: GetHelpersAndAdmins$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getHelpersAndAdmins$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

}
