
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { deleteUser } from '../fn/user-management/delete-user';
import { DeleteUser$Params } from '../fn/user-management/delete-user';
import { getAllUsers } from '../fn/user-management/get-all-users';
import { GetAllUsers$Params } from '../fn/user-management/get-all-users';
import { getHelpers } from '../fn/user-management/get-helpers';
import { GetHelpers$Params } from '../fn/user-management/get-helpers';
import { getHelpersAndAdmins } from '../fn/user-management/get-helpers-and-admins';
import { GetHelpersAndAdmins$Params } from '../fn/user-management/get-helpers-and-admins';
import { getHelpersJunior } from '../fn/user-management/get-helpers-junior';
import { GetHelpersJunior$Params } from '../fn/user-management/get-helpers-junior';
import { getMe } from '../fn/user-management/get-me';
import { GetMe$Params } from '../fn/user-management/get-me';
import { getUsersByRole } from '../fn/user-management/get-users-by-role';
import { GetUsersByRole$Params } from '../fn/user-management/get-users-by-role';
import { updateContactInfo } from '../fn/user-management/update-contact-info';
import { UpdateContactInfo$Params } from '../fn/user-management/update-contact-info';
import { updateUserRole } from '../fn/user-management/update-user-role';
import { UpdateUserRole$Params } from '../fn/user-management/update-user-role';
import { UserDto } from '../models/user-dto';


/**
 * API per la gestione degli utenti
 */
@Injectable({ providedIn: 'root' })
export class UserManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateContactInfo()` */
  static readonly UpdateContactInfoPath = '/api/v1/users/me/contact-info';

  /**
   * Aggiorna le informazioni di contatto dell'utente corrente.
   *
   * Permette all'utente di aggiornare il proprio numero di telefono e codice fiscale.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateContactInfo()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContactInfo$Response(params: UpdateContactInfo$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updateContactInfo(this.http, this.rootUrl, params, context);
  }

  /**
   * Aggiorna le informazioni di contatto dell'utente corrente.
   *
   * Permette all'utente di aggiornare il proprio numero di telefono e codice fiscale.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateContactInfo$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateContactInfo(params: UpdateContactInfo$Params, context?: HttpContext): Observable<UserDto> {
    return this.updateContactInfo$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `updateUserRole()` */
  static readonly UpdateUserRolePath = '/api/v1/users/{userId}/role';

  /**
   * Aggiorna il ruolo di un utente.
   *
   * Permette agli ADMIN di modificare il ruolo di un utente esistente. Non è possibile modificare il ruolo di altri ADMIN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUserRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateUserRole$Response(params: UpdateUserRole$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return updateUserRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Aggiorna il ruolo di un utente.
   *
   * Permette agli ADMIN di modificare il ruolo di un utente esistente. Non è possibile modificare il ruolo di altri ADMIN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUserRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateUserRole(params: UpdateUserRole$Params, context?: HttpContext): Observable<UserDto> {
    return this.updateUserRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/api/v1/users';

  /**
   * Recupera tutti gli utenti (tranne se stessi).
   *
   * Permette agli ADMIN di visualizzare tutti gli utenti registrati nel sistema, escluso il proprio account.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera tutti gli utenti (tranne se stessi).
   *
   * Permette agli ADMIN di visualizzare tutti gli utenti registrati nel sistema, escluso il proprio account.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getMe()` */
  static readonly GetMePath = '/api/v1/users/me';

  /**
   * Recupera i dettagli dell'utente corrente.
   *
   * Recupera le informazioni del profilo dell'utente autenticato.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMe()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMe$Response(params?: GetMe$Params, context?: HttpContext): Observable<StrictHttpResponse<UserDto>> {
    return getMe(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera i dettagli dell'utente corrente.
   *
   * Recupera le informazioni del profilo dell'utente autenticato.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMe$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMe(params?: GetMe$Params, context?: HttpContext): Observable<UserDto> {
    return this.getMe$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserDto>): UserDto => r.body)
    );
  }

  /** Path part for operation `getHelpers()` */
  static readonly GetHelpersPath = '/api/v1/users/helpers';

  /**
   * Recupera tutti gli Helper (Junior, Senior) e PM.
   *
   * Permette agli ADMIN di visualizzare tutti gli utenti con ruolo Helper_Junior, Helper_Senior o PM.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHelpers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpers$Response(params?: GetHelpers$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getHelpers(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera tutti gli Helper (Junior, Senior) e PM.
   *
   * Permette agli ADMIN di visualizzare tutti gli utenti con ruolo Helper_Junior, Helper_Senior o PM.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHelpers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpers(params?: GetHelpers$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getHelpers$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getHelpersJunior()` */
  static readonly GetHelpersJuniorPath = '/api/v1/users/helpers-junior';

  /**
   * Recupera tutti gli Helper Junior.
   *
   * Permette agli ADMIN di visualizzare tutti gli utenti con ruolo Helper_Junior.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHelpersJunior()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpersJunior$Response(params?: GetHelpersJunior$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getHelpersJunior(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera tutti gli Helper Junior.
   *
   * Permette agli ADMIN di visualizzare tutti gli utenti con ruolo Helper_Junior.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHelpersJunior$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpersJunior(params?: GetHelpersJunior$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getHelpersJunior$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getHelpersAndAdmins()` */
  static readonly GetHelpersAndAdminsPath = '/api/v1/users/helpers-and-admins';

  /**
   * Recupera tutti gli Helper, PM e Admin.
   *
   * Permette a Helper, PM e Admin di visualizzare tutti gli utenti con ruolo Helper, PM o Admin.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHelpersAndAdmins()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpersAndAdmins$Response(params?: GetHelpersAndAdmins$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getHelpersAndAdmins(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera tutti gli Helper, PM e Admin.
   *
   * Permette a Helper, PM e Admin di visualizzare tutti gli utenti con ruolo Helper, PM o Admin.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHelpersAndAdmins$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHelpersAndAdmins(params?: GetHelpersAndAdmins$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getHelpersAndAdmins$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `getUsersByRole()` */
  static readonly GetUsersByRolePath = '/api/v1/users/by-role';

  /**
   * Recupera la lista di utenti per ruolo.
   *
   * Fornisce una lista di utenti filtrata per il ruolo specificato.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUsersByRole()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersByRole$Response(params: GetUsersByRole$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<UserDto>>> {
    return getUsersByRole(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera la lista di utenti per ruolo.
   *
   * Fornisce una lista di utenti filtrata per il ruolo specificato.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUsersByRole$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUsersByRole(params: GetUsersByRole$Params, context?: HttpContext): Observable<Array<UserDto>> {
    return this.getUsersByRole$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<UserDto>>): Array<UserDto> => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/api/v1/users/{userId}';

  /**
   * Elimina un account utente.
   *
   * Permette agli ADMIN di eliminare un account utente e tutti i ticket associati. Non è possibile eliminare altri ADMIN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * Elimina un account utente.
   *
   * Permette agli ADMIN di eliminare un account utente e tutti i ticket associati. Non è possibile eliminare altri ADMIN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<void> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
