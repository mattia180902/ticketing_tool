/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createTicketHistory } from '../fn/ticket-history/create-ticket-history';
import { CreateTicketHistory$Params } from '../fn/ticket-history/create-ticket-history';
import { deleteTicketHistory } from '../fn/ticket-history/delete-ticket-history';
import { DeleteTicketHistory$Params } from '../fn/ticket-history/delete-ticket-history';
import { getHistoryByTicketId } from '../fn/ticket-history/get-history-by-ticket-id';
import { GetHistoryByTicketId$Params } from '../fn/ticket-history/get-history-by-ticket-id';
import { TicketHistoryDto } from '../models/ticket-history-dto';

@Injectable({ providedIn: 'root' })
export class TicketHistoryService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `createTicketHistory()` */
  static readonly CreateTicketHistoryPath = '/api/v1/ticketHistories';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTicketHistory()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTicketHistory$Response(params: CreateTicketHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketHistoryDto>> {
    return createTicketHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTicketHistory$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTicketHistory(params: CreateTicketHistory$Params, context?: HttpContext): Observable<TicketHistoryDto> {
    return this.createTicketHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketHistoryDto>): TicketHistoryDto => r.body)
    );
  }

  /** Path part for operation `getHistoryByTicketId()` */
  static readonly GetHistoryByTicketIdPath = '/api/v1/ticketHistories/ticket/{ticketId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getHistoryByTicketId()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoryByTicketId$Response(params: GetHistoryByTicketId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketHistoryDto>>> {
    return getHistoryByTicketId(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getHistoryByTicketId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getHistoryByTicketId(params: GetHistoryByTicketId$Params, context?: HttpContext): Observable<Array<TicketHistoryDto>> {
    return this.getHistoryByTicketId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketHistoryDto>>): Array<TicketHistoryDto> => r.body)
    );
  }

  /** Path part for operation `deleteTicketHistory()` */
  static readonly DeleteTicketHistoryPath = '/api/v1/ticketHistories/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTicketHistory()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTicketHistory$Response(params: DeleteTicketHistory$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTicketHistory(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTicketHistory$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTicketHistory(params: DeleteTicketHistory$Params, context?: HttpContext): Observable<void> {
    return this.deleteTicketHistory$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
