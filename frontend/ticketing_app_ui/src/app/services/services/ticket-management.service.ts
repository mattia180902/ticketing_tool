
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { acceptTicket } from '../fn/ticket-management/accept-ticket';
import { AcceptTicket$Params } from '../fn/ticket-management/accept-ticket';
import { assignTicket } from '../fn/ticket-management/assign-ticket';
import { AssignTicket$Params } from '../fn/ticket-management/assign-ticket';
import { createOrUpdateTicket } from '../fn/ticket-management/create-or-update-ticket';
import { CreateOrUpdateTicket$Params } from '../fn/ticket-management/create-or-update-ticket';
import { DashboardCountsDto } from '../models/dashboard-counts-dto';
import { deleteTicket } from '../fn/ticket-management/delete-ticket';
import { DeleteTicket$Params } from '../fn/ticket-management/delete-ticket';
import { escalateTicket } from '../fn/ticket-management/escalate-ticket';
import { EscalateTicket$Params } from '../fn/ticket-management/escalate-ticket';
import { getAssignedTickets } from '../fn/ticket-management/get-assigned-tickets';
import { GetAssignedTickets$Params } from '../fn/ticket-management/get-assigned-tickets';
import { getAssignedTicketsByStatus } from '../fn/ticket-management/get-assigned-tickets-by-status';
import { GetAssignedTicketsByStatus$Params } from '../fn/ticket-management/get-assigned-tickets-by-status';
import { getDashboardCounts } from '../fn/ticket-management/get-dashboard-counts';
import { GetDashboardCounts$Params } from '../fn/ticket-management/get-dashboard-counts';
import { getMyDrafts } from '../fn/ticket-management/get-my-drafts';
import { GetMyDrafts$Params } from '../fn/ticket-management/get-my-drafts';
import { getMyTickets } from '../fn/ticket-management/get-my-tickets';
import { GetMyTickets$Params } from '../fn/ticket-management/get-my-tickets';
import { getMyTicketsByStatus } from '../fn/ticket-management/get-my-tickets-by-status';
import { GetMyTicketsByStatus$Params } from '../fn/ticket-management/get-my-tickets-by-status';
import { getTicketDetails } from '../fn/ticket-management/get-ticket-details';
import { GetTicketDetails$Params } from '../fn/ticket-management/get-ticket-details';
import { getTickets } from '../fn/ticket-management/get-tickets';
import { GetTickets$Params } from '../fn/ticket-management/get-tickets';
import { PageTicketResponseDto } from '../models/page-ticket-response-dto';
import { rejectTicket } from '../fn/ticket-management/reject-ticket';
import { RejectTicket$Params } from '../fn/ticket-management/reject-ticket';
import { TicketResponseDto } from '../models/ticket-response-dto';
import { updateTicketStatus } from '../fn/ticket-management/update-ticket-status';
import { UpdateTicketStatus$Params } from '../fn/ticket-management/update-ticket-status';


/**
 * API per la gestione dei ticket
 */
@Injectable({ providedIn: 'root' })
export class TicketManagementService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTickets()` */
  static readonly GetTicketsPath = '/api/v1/tickets';

  /**
   * Recupera tutti i ticket (paginati e filtrati per ruolo).
   *
   * Recupera una lista paginata di ticket in base al ruolo dell'utente autenticato.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTickets()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTickets$Response(params: GetTickets$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTicketResponseDto>> {
    return getTickets(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera tutti i ticket (paginati e filtrati per ruolo).
   *
   * Recupera una lista paginata di ticket in base al ruolo dell'utente autenticato.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTickets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTickets(params: GetTickets$Params, context?: HttpContext): Observable<PageTicketResponseDto> {
    return this.getTickets$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTicketResponseDto>): PageTicketResponseDto => r.body)
    );
  }

  /** Path part for operation `createOrUpdateTicket()` */
  static readonly CreateOrUpdateTicketPath = '/api/v1/tickets';

  /**
   * Crea un nuovo ticket o aggiorna una bozza esistente.
   *
   * Permette a USER, HELPER, PM e ADMIN di creare un nuovo ticket o di salvare/finalizzare una bozza.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createOrUpdateTicket()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrUpdateTicket$Response(params: CreateOrUpdateTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return createOrUpdateTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * Crea un nuovo ticket o aggiorna una bozza esistente.
   *
   * Permette a USER, HELPER, PM e ADMIN di creare un nuovo ticket o di salvare/finalizzare una bozza.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createOrUpdateTicket$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createOrUpdateTicket(params: CreateOrUpdateTicket$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.createOrUpdateTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `updateTicketStatus()` */
  static readonly UpdateTicketStatusPath = '/api/v1/tickets/{ticketId}/status';

  /**
   * Aggiorna lo stato di un ticket.
   *
   * Permette a HELPER, PM e ADMIN di cambiare lo stato di un ticket. Le bozze non possono essere modificate qui.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateTicketStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTicketStatus$Response(params: UpdateTicketStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return updateTicketStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Aggiorna lo stato di un ticket.
   *
   * Permette a HELPER, PM e ADMIN di cambiare lo stato di un ticket. Le bozze non possono essere modificate qui.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateTicketStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateTicketStatus(params: UpdateTicketStatus$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.updateTicketStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `rejectTicket()` */
  static readonly RejectTicketPath = '/api/v1/tickets/{ticketId}/reject';

  /**
   * Rifiuta e riassegna un ticket.
   *
   * Un helper/PM/admin rifiuta un ticket e lo riassegna a un altro helper/admin. Il ticket deve essere in stato OPEN.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `rejectTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectTicket$Response(params: RejectTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return rejectTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * Rifiuta e riassegna un ticket.
   *
   * Un helper/PM/admin rifiuta un ticket e lo riassegna a un altro helper/admin. Il ticket deve essere in stato OPEN.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `rejectTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  rejectTicket(params: RejectTicket$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.rejectTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `escalateTicket()` */
  static readonly EscalateTicketPath = '/api/v1/tickets/{ticketId}/escalate';

  /**
   * Escala un ticket.
   *
   * Un helper/PM/admin scala un ticket (portandolo da ANSWERED a OPEN) e lo riassegna a un altro helper/admin.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `escalateTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  escalateTicket$Response(params: EscalateTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return escalateTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * Escala un ticket.
   *
   * Un helper/PM/admin scala un ticket (portandolo da ANSWERED a OPEN) e lo riassegna a un altro helper/admin.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `escalateTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  escalateTicket(params: EscalateTicket$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.escalateTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `assignTicket()` */
  static readonly AssignTicketPath = '/api/v1/tickets/{ticketId}/assign';

  /**
   * Assegna un ticket a un helper/admin.
   *
   * Permette a PM e ADMIN di assegnare manualmente un ticket a un utente specifico (solo helper/admin).
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTicket$Response(params: AssignTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return assignTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * Assegna un ticket a un helper/admin.
   *
   * Permette a PM e ADMIN di assegnare manualmente un ticket a un utente specifico (solo helper/admin).
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTicket(params: AssignTicket$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.assignTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `acceptTicket()` */
  static readonly AcceptTicketPath = '/api/v1/tickets/{ticketId}/accept';

  /**
   * Accetta un ticket.
   *
   * Un helper/PM/admin accetta un ticket assegnatogli, portandolo da OPEN ad ANSWERED.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `acceptTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptTicket$Response(params: AcceptTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return acceptTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * Accetta un ticket.
   *
   * Un helper/PM/admin accetta un ticket assegnatogli, portandolo da OPEN ad ANSWERED.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `acceptTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  acceptTicket(params: AcceptTicket$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.acceptTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `getTicketDetails()` */
  static readonly GetTicketDetailsPath = '/api/v1/tickets/{ticketId}';

  /**
   * Recupera i dettagli di un ticket specifico.
   *
   * Recupera i dettagli completi di un ticket tramite il suo ID.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTicketDetails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTicketDetails$Response(params: GetTicketDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return getTicketDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera i dettagli di un ticket specifico.
   *
   * Recupera i dettagli completi di un ticket tramite il suo ID.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTicketDetails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTicketDetails(params: GetTicketDetails$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.getTicketDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `deleteTicket()` */
  static readonly DeleteTicketPath = '/api/v1/tickets/{ticketId}';

  /**
   * Elimina un ticket.
   *
   * Permette all'owner di eliminare le proprie bozze, e agli ADMIN di eliminare qualsiasi ticket.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTicket$Response(params: DeleteTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * Elimina un ticket.
   *
   * Permette all'owner di eliminare le proprie bozze, e agli ADMIN di eliminare qualsiasi ticket.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTicket(params: DeleteTicket$Params, context?: HttpContext): Observable<void> {
    return this.deleteTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMyTickets()` */
  static readonly GetMyTicketsPath = '/api/v1/tickets/my-tickets';

  /**
   * Recupera tutti i ticket di proprietà dell'utente corrente.
   *
   * Recupera tutti i ticket creati dall'utente autenticato, escluse le bozze.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyTickets()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTickets$Response(params?: GetMyTickets$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketResponseDto>>> {
    return getMyTickets(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera tutti i ticket di proprietà dell'utente corrente.
   *
   * Recupera tutti i ticket creati dall'utente autenticato, escluse le bozze.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyTickets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTickets(params?: GetMyTickets$Params, context?: HttpContext): Observable<Array<TicketResponseDto>> {
    return this.getMyTickets$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketResponseDto>>): Array<TicketResponseDto> => r.body)
    );
  }

  /** Path part for operation `getMyTicketsByStatus()` */
  static readonly GetMyTicketsByStatusPath = '/api/v1/tickets/my-tickets/status/{status}';

  /**
   * Recupera i ticket di proprietà dell'utente per stato.
   *
   * Recupera i ticket creati dall'utente autenticato, filtrati per uno stato specifico.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyTicketsByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTicketsByStatus$Response(params: GetMyTicketsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketResponseDto>>> {
    return getMyTicketsByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera i ticket di proprietà dell'utente per stato.
   *
   * Recupera i ticket creati dall'utente autenticato, filtrati per uno stato specifico.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyTicketsByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTicketsByStatus(params: GetMyTicketsByStatus$Params, context?: HttpContext): Observable<Array<TicketResponseDto>> {
    return this.getMyTicketsByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketResponseDto>>): Array<TicketResponseDto> => r.body)
    );
  }

  /** Path part for operation `getMyDrafts()` */
  static readonly GetMyDraftsPath = '/api/v1/tickets/my-drafts';

  /**
   * Recupera tutte le bozze dell'utente corrente.
   *
   * Recupera tutti i ticket in stato DRAFT creati dall'utente autenticato.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyDrafts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyDrafts$Response(params?: GetMyDrafts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketResponseDto>>> {
    return getMyDrafts(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera tutte le bozze dell'utente corrente.
   *
   * Recupera tutti i ticket in stato DRAFT creati dall'utente autenticato.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyDrafts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyDrafts(params?: GetMyDrafts$Params, context?: HttpContext): Observable<Array<TicketResponseDto>> {
    return this.getMyDrafts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketResponseDto>>): Array<TicketResponseDto> => r.body)
    );
  }

  /** Path part for operation `getDashboardCounts()` */
  static readonly GetDashboardCountsPath = '/api/v1/tickets/dashboard/counts';

  /**
   * Recupera i conteggi dei ticket per la dashboard.
   *
   * Fornisce i conteggi aggregati dei ticket (totali, aperti, risolti, bozze) in base al ruolo dell'utente.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDashboardCounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDashboardCounts$Response(params?: GetDashboardCounts$Params, context?: HttpContext): Observable<StrictHttpResponse<DashboardCountsDto>> {
    return getDashboardCounts(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera i conteggi dei ticket per la dashboard.
   *
   * Fornisce i conteggi aggregati dei ticket (totali, aperti, risolti, bozze) in base al ruolo dell'utente.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDashboardCounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDashboardCounts(params?: GetDashboardCounts$Params, context?: HttpContext): Observable<DashboardCountsDto> {
    return this.getDashboardCounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<DashboardCountsDto>): DashboardCountsDto => r.body)
    );
  }

  /** Path part for operation `getAssignedTickets()` */
  static readonly GetAssignedTicketsPath = '/api/v1/tickets/assigned-to-me';

  /**
   * Recupera i ticket assegnati all'utente corrente.
   *
   * Recupera tutti i ticket assegnati all'utente autenticato, escluse le bozze.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAssignedTickets()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAssignedTickets$Response(params?: GetAssignedTickets$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketResponseDto>>> {
    return getAssignedTickets(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera i ticket assegnati all'utente corrente.
   *
   * Recupera tutti i ticket assegnati all'utente autenticato, escluse le bozze.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAssignedTickets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAssignedTickets(params?: GetAssignedTickets$Params, context?: HttpContext): Observable<Array<TicketResponseDto>> {
    return this.getAssignedTickets$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketResponseDto>>): Array<TicketResponseDto> => r.body)
    );
  }

  /** Path part for operation `getAssignedTicketsByStatus()` */
  static readonly GetAssignedTicketsByStatusPath = '/api/v1/tickets/assigned-to-me/status/{status}';

  /**
   * Recupera i ticket assegnati all'utente per stato.
   *
   * Recupera i ticket assegnati all'utente autenticato, filtrati per uno stato specifico.
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAssignedTicketsByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAssignedTicketsByStatus$Response(params: GetAssignedTicketsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketResponseDto>>> {
    return getAssignedTicketsByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * Recupera i ticket assegnati all'utente per stato.
   *
   * Recupera i ticket assegnati all'utente autenticato, filtrati per uno stato specifico.
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAssignedTicketsByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAssignedTicketsByStatus(params: GetAssignedTicketsByStatus$Params, context?: HttpContext): Observable<Array<TicketResponseDto>> {
    return this.getAssignedTicketsByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketResponseDto>>): Array<TicketResponseDto> => r.body)
    );
  }

}
