/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { assignTicket } from '../fn/ticket-controller/assign-ticket';
import { AssignTicket$Params } from '../fn/ticket-controller/assign-ticket';
import { createTicket } from '../fn/ticket-controller/create-ticket';
import { CreateTicket$Params } from '../fn/ticket-controller/create-ticket';
import { DashboardCountsDto } from '../models/dashboard-counts-dto';
import { deleteTicket } from '../fn/ticket-controller/delete-ticket';
import { DeleteTicket$Params } from '../fn/ticket-controller/delete-ticket';
import { getCounts } from '../fn/ticket-controller/get-counts';
import { GetCounts$Params } from '../fn/ticket-controller/get-counts';
import { getDrafts } from '../fn/ticket-controller/get-drafts';
import { GetDrafts$Params } from '../fn/ticket-controller/get-drafts';
import { getMyTickets } from '../fn/ticket-controller/get-my-tickets';
import { GetMyTickets$Params } from '../fn/ticket-controller/get-my-tickets';
import { getMyTicketsByStatus } from '../fn/ticket-controller/get-my-tickets-by-status';
import { GetMyTicketsByStatus$Params } from '../fn/ticket-controller/get-my-tickets-by-status';
import { getTicketDetails } from '../fn/ticket-controller/get-ticket-details';
import { GetTicketDetails$Params } from '../fn/ticket-controller/get-ticket-details';
import { getTickets } from '../fn/ticket-controller/get-tickets';
import { GetTickets$Params } from '../fn/ticket-controller/get-tickets';
import { PageTicketResponseDto } from '../models/page-ticket-response-dto';
import { TicketResponseDto } from '../models/ticket-response-dto';
import { updateStatus } from '../fn/ticket-controller/update-status';
import { UpdateStatus$Params } from '../fn/ticket-controller/update-status';

@Injectable({ providedIn: 'root' })
export class TicketControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTickets()` */
  static readonly GetTicketsPath = '/api/v1/tickets';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTickets()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTickets$Response(params: GetTickets$Params, context?: HttpContext): Observable<StrictHttpResponse<PageTicketResponseDto>> {
    return getTickets(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTickets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTickets(params: GetTickets$Params, context?: HttpContext): Observable<PageTicketResponseDto> {
    return this.getTickets$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageTicketResponseDto>): PageTicketResponseDto => r.body)
    );
  }

  /** Path part for operation `createTicket()` */
  static readonly CreateTicketPath = '/api/v1/tickets';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createTicket()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTicket$Response(params: CreateTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return createTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createTicket$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createTicket(params: CreateTicket$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.createTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `updateStatus()` */
  static readonly UpdateStatusPath = '/api/v1/tickets/{id}/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateStatus$Response(params: UpdateStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return updateStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateStatus(params: UpdateStatus$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.updateStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `assignTicket()` */
  static readonly AssignTicketPath = '/api/v1/tickets/{id}/assign';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `assignTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTicket$Response(params: AssignTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return assignTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `assignTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  assignTicket(params: AssignTicket$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.assignTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `getTicketDetails()` */
  static readonly GetTicketDetailsPath = '/api/v1/tickets/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTicketDetails()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTicketDetails$Response(params: GetTicketDetails$Params, context?: HttpContext): Observable<StrictHttpResponse<TicketResponseDto>> {
    return getTicketDetails(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTicketDetails$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTicketDetails(params: GetTicketDetails$Params, context?: HttpContext): Observable<TicketResponseDto> {
    return this.getTicketDetails$Response(params, context).pipe(
      map((r: StrictHttpResponse<TicketResponseDto>): TicketResponseDto => r.body)
    );
  }

  /** Path part for operation `deleteTicket()` */
  static readonly DeleteTicketPath = '/api/v1/tickets/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteTicket()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTicket$Response(params: DeleteTicket$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteTicket(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteTicket$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteTicket(params: DeleteTicket$Params, context?: HttpContext): Observable<void> {
    return this.deleteTicket$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getMyTickets()` */
  static readonly GetMyTicketsPath = '/api/v1/tickets/my';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyTickets()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTickets$Response(params?: GetMyTickets$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketResponseDto>>> {
    return getMyTickets(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyTickets$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTickets(params?: GetMyTickets$Params, context?: HttpContext): Observable<Array<TicketResponseDto>> {
    return this.getMyTickets$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketResponseDto>>): Array<TicketResponseDto> => r.body)
    );
  }

  /** Path part for operation `getMyTicketsByStatus()` */
  static readonly GetMyTicketsByStatusPath = '/api/v1/tickets/my/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getMyTicketsByStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTicketsByStatus$Response(params: GetMyTicketsByStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketResponseDto>>> {
    return getMyTicketsByStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getMyTicketsByStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getMyTicketsByStatus(params: GetMyTicketsByStatus$Params, context?: HttpContext): Observable<Array<TicketResponseDto>> {
    return this.getMyTicketsByStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketResponseDto>>): Array<TicketResponseDto> => r.body)
    );
  }

  /** Path part for operation `getDrafts()` */
  static readonly GetDraftsPath = '/api/v1/tickets/my/drafts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDrafts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDrafts$Response(params?: GetDrafts$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<TicketResponseDto>>> {
    return getDrafts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDrafts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDrafts(params?: GetDrafts$Params, context?: HttpContext): Observable<Array<TicketResponseDto>> {
    return this.getDrafts$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<TicketResponseDto>>): Array<TicketResponseDto> => r.body)
    );
  }

  /** Path part for operation `getCounts()` */
  static readonly GetCountsPath = '/api/v1/tickets/dashboard/counts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCounts$Response(params?: GetCounts$Params, context?: HttpContext): Observable<StrictHttpResponse<DashboardCountsDto>> {
    return getCounts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCounts(params?: GetCounts$Params, context?: HttpContext): Observable<DashboardCountsDto> {
    return this.getCounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<DashboardCountsDto>): DashboardCountsDto => r.body)
    );
  }

}
